test1.cl - This test case stumped me on PA3c3. The gimmick is that there are a lot of TAC expressions -- around 5000 -- that broke some of my program. In particular, I was using 16-bit integers in a couple places to try and save memory, and I wasn't allocating large enough buffers for my arenas. Those two issues were fine for small programs but caused segfaults for a large one.
test2.cl - This test case explicitly handled cases with static dispatch, which was helpful when tracking down why my codegen wasn't working on some of the built-in cool programs.
test3.cl - One of the last bugs I found related to let and case bindings. Since I used TAC as an IR, case expressions had to be handled slightly differently than the rest of the expressions. As a result, the bindings would occasionally be overwritten or not found, causing errors.
test4.cl - One of the more subtle rules in the Cool specification is that while returns void, not an Object (even though its type is Object). Unfortunately since I was using TAC, that meant I had to add another custom TAC operation that would specifically assign void to while loops. This bug took me a while to hunt down since the fact that while returns void wasn't typically used anywhere, only as an edge case.